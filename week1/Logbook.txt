 Problem: Inchworm.lunchtime(branch, rest, leaf)

First idea:
  Loop i from 0 to branch step=rest; if (i % leaf == 0) res++

Why it might work:
  We simulate each landing and check leaf alignment.

Try #1 (brute force):
  Code:
    for (int i = 0; i <= branch; i += rest)
      if (i % leaf == 0) ++res;
  Result: Works on small tests. Complexity ~ O(branch/rest). Could be slow for big branch when rest is small.

Try #2 (gcd)
    x = Greatest Common divisor of leaf and rest to find the point at which they meet interval 
    dividing the branch by x to find out many time that interval exists between the branch

Try #3 (lcm)
    mistook gcd as lcm earlier 
- Reflection:
    Was a good question but got through it using simple maths topic


Problem: ThrowTheBall 
First Idea:
Simulate it in N*M Loop
Why it might work:
We storing count for every person in vector

Try #1(Brute Force)
    Code: 
     while (p[i] < M)
        p[i]++;
        if(p[i] % 2 == 0)
            i =  (i + L) % N;
        else
            i = (i - L + N) % N;
    count++;

    #2 submission did p[0]++; and moved p[i]++ to end of loop 

- Reflection:
    First Try
